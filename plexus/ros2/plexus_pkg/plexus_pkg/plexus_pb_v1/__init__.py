# Copyright (c) Meta Platforms, Inc. and affiliates.

# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: plexus.proto
# plugin: python-betterproto

from dataclasses import dataclass
from typing import Optional

import betterproto


class Finger(betterproto.Enum):
    NONE = 0
    INDEX = 1
    MIDDLE = 2
    PINKY = 3
    THUMB = 4
    PALM = 5


class ResetControlResetType(betterproto.Enum):
    NONE = 0
    SOFT_MAGNETIC = 1
    HARD_MAGNETIC = 2
    POWER_ON = 3
    POWER_OFF = 4
    POWER_CYCLE = 5


@dataclass(eq=False, repr=False)
class Mag(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)
    temperature: float = betterproto.float_field(4)


@dataclass(eq=False, repr=False)
class Data(betterproto.Message):
    timestamp: int = betterproto.uint32_field(1)
    sample: int = betterproto.uint32_field(2)
    finger: "Finger" = betterproto.enum_field(3)
    link: int = betterproto.int32_field(4)
    sensor_id: int = betterproto.int32_field(5)
    mag: "Mag" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class OdrControl(betterproto.Message):
    data_rate: int = betterproto.int32_field(1)
    data_mode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class AxisControl(betterproto.Message):
    x_enable: bool = betterproto.bool_field(1)
    y_enable: bool = betterproto.bool_field(2)
    z_enable: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ResetControl(betterproto.Message):
    type: "ResetControlResetType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class SensorStatus(betterproto.Message):
    finger: "Finger" = betterproto.enum_field(1)
    link: int = betterproto.int32_field(2)
    sensor_id: int = betterproto.int32_field(3)
    present: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class PowerStatus(betterproto.Message):
    timestamp: int = betterproto.uint32_field(1)
    voltage: float = betterproto.float_field(2)
    current: float = betterproto.float_field(3)
    power: float = betterproto.float_field(4)


@dataclass(eq=False, repr=False)
class Control(betterproto.Message):
    odr: Optional["OdrControl"] = betterproto.message_field(
        1, optional=True, group="_odr"
    )
    axis: Optional["AxisControl"] = betterproto.message_field(
        2, optional=True, group="_axis"
    )
    reset: Optional["ResetControl"] = betterproto.message_field(
        3, optional=True, group="_reset"
    )


@dataclass(eq=False, repr=False)
class Status(betterproto.Message):
    sensor_status: Optional["SensorStatus"] = betterproto.message_field(
        1, optional=True, group="_sensor_status"
    )
    power_status: Optional["PowerStatus"] = betterproto.message_field(
        2, optional=True, group="_power_status"
    )


@dataclass(eq=False, repr=False)
class Plexus(betterproto.Message):
    control: Optional["Control"] = betterproto.message_field(
        1, optional=True, group="_control"
    )
    data: Optional["Data"] = betterproto.message_field(2, optional=True, group="_data")
    status: Optional["Status"] = betterproto.message_field(
        3, optional=True, group="_status"
    )
